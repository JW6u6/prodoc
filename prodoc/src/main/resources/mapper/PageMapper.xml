<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.prodoc.page.mapper.PageMapper">
	<select id="pageList" resultType="PageVO">
		select page_id,page_name
		from tbl_page
		where work_id = #{workId}
		and parent_id
		is NULL
		and delete_check != 'TRUE'
		order by numbering
  	</select>
  	<select id = "findWork" resultType="String">
  		select work_id
  		from tbl_page
  		where page_id = #{pageId}
  	</select>
  	<select id = "pageInPage" resultType="PageVO">
  		select page_id,page_name
  		from tbl_page
  		where parent_id = #{pageId}
  		order by numbering
  	</select>
  	
  	<update id="updatePage">
  		update tbl_page
		set work_id = #{workId},
			numbering = (select max(numbering)+512 from tbl_page)
		where page_id = #{pageId}
  	</update>
  	
  	<insert id="insertPage" parameterType="PageVO" statementType="CALLABLE">
 		{call insert_page(
 						#{pageId, mode=OUT, jdbcType=VARCHAR, javaType=string}
 					,	#{parentId}
 					,	#{pageName}
 					,	#{creUser}
 					,	#{workId}
 					,	#{caseId}
 					,	#{insertResult, mode=OUT, jdbcType=VARCHAR, javaType=string}
 						)
 		}
 	</insert>
  
  	<select id ="selectPageInfo" parameterType="String" resultType="PageVO">
  		SELECT *
  		FROM tbl_page
  		WHERE page_id = #{pageId}
  	</select>
  	<!-- 등록 -->
  	<!-- <insert id="insertPage" parameterType="PageVO" statementType ="CALLABLE">
  		{call INSERT_PAGE(
  							#{pid, mode=OUT, jdbcType=VARCHER, javaType=string}
  						,	#{parentId}
  						,	#{pageName}
  						,	#{creUser}
  						,	#{workId}
  						,	#{caseId}
  						,	#{result, mode=OUT, jdbcType=VARCHER, javaType=string}
  		)}
 	</insert> -->
 	
 	<!-- 페이지 잠금(관리자, 소유자) -->
 	<update id="LockPage" parameterType="PageVO">
 		UPDATE tbl_page
		SET lock_check = #{lockCheck}
		WHERE page_id = #{pageId}
	</update>

	<!-- 페이지 삭제(체크) -->
	<update id="RemoveCheckPage" parameterType="String">
		UPDATE tbl_page
		SET delete_check = 'TRUE'
		WHERE page_id = #{pageId}
	</update>
	
	<!-- 페이지 삭제시 자식 페이지들까지 모조리 삭제 -->
	<update id="RemoveChildPage" parameterType="String" statementType ="CALLABLE">
		{CALL DELETE_PAGE_PROCESS(
									#{pageId}
			)}
	</update>

	<!-- 워크스페이스 지우면 그 워크스페이스의 페이지까지 지워지도록 -->
	<update id="ifWorkRemove" parameterType="String">
		UPDATE tbl_page
		SET delete_check = 'TRUE'
		WHERE work_id = #{workId}
	</update>

	<!-- 페이지 알림 끄기 -->
	<insert id="onOffPage" parameterType="PageVO"
		statementType="CALLABLE">
		{call PAGENOTI_TOGGLE(
		#{pageId}
		, #{email}
		, #{result, mode=OUT, jdbcType=INTEGER, javaType=int}
		)}
	</insert>
	
	<!-- 페이지 알림 꺼져있는지 켜져있는지 알려줌 -->
	<select id="selectTurnOn" resultType="int">
		select count(*)
		from tbl_no_notifyed
		where page_id = #{pageId}
		and email = #{email}
	</select>


	<!-- 페이지 새이름 -->
	<update id="newName" parameterType="pageVO">
		UPDATE TBL_PAGE SET page_name = #{pageName} WHERE page_id = #{pageId}
	</update>
</mapper>
  
  